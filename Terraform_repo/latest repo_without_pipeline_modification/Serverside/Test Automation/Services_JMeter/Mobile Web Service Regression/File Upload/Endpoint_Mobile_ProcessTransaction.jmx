<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HostIP" elementType="Argument">
            <stringProp name="Argument.name">HostIP</stringProp>
            <stringProp name="Argument.value">amt.v1.fieldsmarttest.com/qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="x-fws-appCode" elementType="Argument">
            <stringProp name="Argument.name">x-fws-appCode</stringProp>
            <stringProp name="Argument.value">WM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthInt" elementType="Argument">
            <stringProp name="Argument.name">AuthInt</stringProp>
            <stringProp name="Argument.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">SQLTest</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://sql-web-dev-uksouth.database.windows.net;databaseName=fieldsmart-qa;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">FieldsmartMobileDev@123</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">QaLogin</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="SetUp - Auth0 Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Access Token" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="auth0" elementType="Argument">
                <stringProp name="Argument.name">auth0</stringProp>
                <stringProp name="Argument.value">mcamt.eu.auth0.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="Argument">
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">tn47mNO4J4gySXDG3bhuc11miYI5Jgnh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="Argument">
                <stringProp name="Argument.name">client_secret</stringProp>
                <stringProp name="Argument.value">yeHHeL4UByjpj06Xb8xI-8Sqm0E7-rcgzY7TIPWZsAf1-t-aLJmYkIVVN1pYWKSb</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="audience" elementType="Argument">
                <stringProp name="Argument.name">audience</stringProp>
                <stringProp name="Argument.value">tn47mNO4J4gySXDG3bhuc11miYI5Jgnh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">trisha.quinn@capita.co.uk</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">P@ssw0rd23</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="uservar" elementType="Argument">
                <stringProp name="Argument.name">uservar</stringProp>
                <stringProp name="Argument.value">activeuser</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">https://oauth.pstmn.io/v1/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">STATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
                <elementProp name="audience" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${audience}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">audience</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${auth0}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/authorize</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract state from hidden input" enabled="true">
              <stringProp name="HtmlExtractor.refname">state</stringProp>
              <stringProp name="HtmlExtractor.expr">input[name=state]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">NOSTATE</stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Login Form Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">default</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${auth0}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">u/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract authorisation code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">authcode</stringProp>
              <stringProp name="RegexExtractor.regex">code=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOAUTHCODE</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Access Token Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">authorization_code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_secret}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${authcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">https://oauth.pstmn.io/v1/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                </elementProp>
                <elementProp name="audience" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${audience}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">audience</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${auth0}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">oauth/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ID_TOKEN" enabled="true">
              <stringProp name="TestPlan.comments">Extract ID_TOKEN from response (auth0 uses id token instead of access token for authentication)</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">id_token; access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id_token; $.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOVALUE; NOVALUE</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Set Token as global variable" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(${uservar}_id, ${id_token})};
${__setProperty(${uservar}, ${access_token})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="RESET COOKIES FOR NEXT LOGIN PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.*
sampler.getCookieManager().getCookies().clear()</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Access Token" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="auth0" elementType="Argument">
                <stringProp name="Argument.name">auth0</stringProp>
                <stringProp name="Argument.value">mcamt.eu.auth0.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="Argument">
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">tn47mNO4J4gySXDG3bhuc11miYI5Jgnh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="Argument">
                <stringProp name="Argument.name">client_secret</stringProp>
                <stringProp name="Argument.value">yeHHeL4UByjpj06Xb8xI-8Sqm0E7-rcgzY7TIPWZsAf1-t-aLJmYkIVVN1pYWKSb</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="audience" elementType="Argument">
                <stringProp name="Argument.name">audience</stringProp>
                <stringProp name="Argument.value">tn47mNO4J4gySXDG3bhuc11miYI5Jgnh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">Nikitasha.Giriyan@capita.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">Sybex101</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="uservar" elementType="Argument">
                <stringProp name="Argument.name">uservar</stringProp>
                <stringProp name="Argument.value">activeuser</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">https://oauth.pstmn.io/v1/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">STATE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
                <elementProp name="audience" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${audience}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">audience</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${auth0}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/authorize</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Extract state from hidden input" enabled="true">
              <stringProp name="HtmlExtractor.refname">state</stringProp>
              <stringProp name="HtmlExtractor.expr">input[name=state]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">NOSTATE</stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Login Form Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">default</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${auth0}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">u/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract authorisation code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">authcode</stringProp>
              <stringProp name="RegexExtractor.regex">code=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOAUTHCODE</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Access Token Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">authorization_code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_secret}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${authcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">https://oauth.pstmn.io/v1/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                </elementProp>
                <elementProp name="audience" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">http://fusion.amysybex.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">audience</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${auth0}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">oauth/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ID_TOKEN" enabled="true">
              <stringProp name="TestPlan.comments">Extract ID_TOKEN from response (auth0 uses id token instead of access token for authentication)</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">id_token; access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id_token; $.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOVALUE; NOVALUE</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Set Token as global variable" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(${uservar}_id, ${id_token})};
${__setProperty(${uservar}, ${access_token})};
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="RESET COOKIES FOR NEXT LOGIN PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.*
sampler.getCookieManager().getCookies().clear()</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CLOSED WorkOrder (xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order [IWS]" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]- Work Status- RELEASED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and additionaltext=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from WorkIssued table (xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]- WorkOrderNo comparison for Released workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- ISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos; and AdditionalText=&apos;issued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO] WorkOrderNo  comparison for Issued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- RECEIVED ON DEVICE (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for Received on device workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Closed" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Work Status- CLOSED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;CLOSED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;Closed WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestClosed.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;Closed WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CLOSED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for closed status  (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- REISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkStatus from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (vars.getObject(&quot;Request_2&quot;).size() &gt; 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for Reissued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] REISSUED&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- RECALL WorkOrder (xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RELEASED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and additionaltext=&apos;released WO test&apos;;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO]  WorkOrderNo comparison for Released workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO]  Work Status- ISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and additionaltext=&apos;issued WO test&apos;; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for Issued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECEIVED ON DEVICE (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for Received on device workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Recall" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECALL (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECALLED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;recalled WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;recalled WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RECALLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for recalled workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- REISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for Reissued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo(xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- REJECT WorkOrder (xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RELEASED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for Released workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- ISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText = &apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for Issued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RECEIVED ON DEVICE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for rejected workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Update workissued set usercode=&apos;Nikitasha&apos; where WorkOrderNo=&apos;TestRel-29012022&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Reject" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REJECTED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REJECTED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;rejected WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch rejected WorkOrderNo from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;rejected WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REJECTED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for rejected workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for Reissued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CANCEL WorkOrder(xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RELEASED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Released workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- ISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for Issued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RECEIVED ON DEVICE (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Received on device workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Cancel" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- CANCELLED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;CANCELLED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;cancel WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch cancelled WorkOrderNo from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;cancel WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CANCELLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for cancelled workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- REISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO]  WorkOrderNo comparison for reissued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- BLANK (xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- RELEASED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkOrderNo comparison for Released workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Blank" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- ISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;blank WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch blank WorkStatus from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;blank WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkStatus comparison for blank workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] &quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- WorkOrderNotFoundException (xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[EXCEPTION] Work Status- RELEASED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/error/errorCode/text() = &apos;WorkOrderNotFoundException&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HeartBeat (xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] Request- Delete existing entry in UserActivityStatus table (xml)" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">DELETE FROM USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and ActivityType=&apos;HEARTBEAT&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- Fetch the Deleted entry from UserActivityStatus table" enabled="false">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Select * FROM USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="HeartBeat Transaction" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HEARTBEAT] Heartbeat Transaction (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;${__time(yyyyMMdd,Value)}&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;${__time(hhmmss,Value)}&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Heartbeat_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;HEARTBEAT&quot;&gt;&#xd;
      &lt;Latitude&gt;40.741895&lt;/Latitude&gt;&#xd;
      &lt;Longitude&gt;-73.989308&lt;/Longitude&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request - Fetch ActivityType  from useractivitystatus table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select ActivityType from useractivitystatus where usercode= &apos;Nikitasha&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[HEARTBEAT] ActivityType comparison for Heartbeat Transaction (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;ActivityType&quot;:&quot;HEARTBEAT&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of ActivityType (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActivityTypeFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ActivityType&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual ActivityType useractivitystatus table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;ActivityType&quot;).equals(${ActivityTypeFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CLOSED WorkOrder (json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order [IWS]" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]- Work Status- RELEASED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from WorkIssued table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]- WorkOrderNo comparison for Released workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- ISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos; and AdditionalText=&apos;issued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO] WorkOrderNo  comparison for Issued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- RECEIVED ON DEVICE (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for Received on device workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Closed" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Work Status- CLOSED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;Closed WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;CLOSED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestClosed.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkStatusHistory table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;Closed WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkIssued table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CLOSED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for closed status  (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- REISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkStatus from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (vars.getObject(&quot;Request_2&quot;).size() &gt; 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO] WorkStatus comparison for reissued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] REISSUED&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo(xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- RECALL WorkOrder (json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RELEASED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and additionaltext=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO]  WorkOrderNo comparison for Released workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table(json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO]  Work Status- ISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and additionaltext=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for Issued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECEIVED ON DEVICE (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for Received on device workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Recall" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECALL (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;recalled WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECALLED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;recalled WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RECALLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for recalled workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- REISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for reissued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- REJECT WorkOrder (json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RELEASED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos;and additionaltext=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for Released workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- ISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for Issued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RECEIVED ON DEVICE (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for received on device workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Update workissued set usercode=&apos;Nikitasha&apos; where WorkOrderNo=&apos;TestRel-29012022&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Reject" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REJECTED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;rejected WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REJECTED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch rejected WorkOrderNo from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;rejected WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REJECTED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for rejected workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for reissued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CANCEL WorkOrder(json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RELEASED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Released workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- ISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table (json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for Issued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RECEIVED ON DEVICE (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Received on device workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Cancel" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- CANCELLED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;cancel WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;CANCELLED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch cancelled WorkOrderNo from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;cancel WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CANCELLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for cancelled workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- REISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO]  WorkOrderNo comparison for reissued workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo(json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- BLANK (json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- RELEASED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkOrderNo comparison for Released workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Blank" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- ISSUED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;blank WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch blank WorkStatus from WorkStatusHistory ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;blank WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkStatus comparison for blank workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] &quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- WorkOrderNotFoundException (json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[EXCEPTION] Work Status- RELEASED (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.errorCode</stringProp>
              <stringProp name="EXPECTED_VALUE">WorkOrderNotFoundException</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HeartBeat (json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request - Delete existing entry(json)" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">DELETE FROM USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request- Fetch entry for validation (json)" enabled="false">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Select * from USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="HeartBeat Transaction" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HEARTBEAT] Heartbeat Transaction (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Heartbeat_Test&quot;,&#xd;
    &quot;logDate&quot;: ${__time(yyyyMMdd,Value)},&#xd;
    &quot;logTime&quot;: &quot;${__time(hhmmss,Value)}&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;latitude&quot;: &quot;40.741895&quot;,&#xd;
      &quot;longitude&quot;: &quot;-73.989308&quot;,&#xd;
      &quot;type&quot;: &quot;HEARTBEAT&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request- Fetch added entry(json)" enabled="false">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">Select * from USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request - Fetch ActivityType  from useractivitystatus table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select ActivityType from useractivitystatus where usercode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[HEARTBEAT] ActivityType comparison for Heartbeat Transaction (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;ActivityType&quot;:&quot;HEARTBEAT&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of ActivityType (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActivityTypeFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ActivityType&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual ActivityType useractivitystatus table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;ActivityType&quot;).equals(${ActivityTypeFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CLOSED WorkOrder (-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept </stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order [IWS]" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]- Work Status- RELEASED (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from WorkIssued table (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]- WorkOrderNo comparison for Released workstatus (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- ISSUED (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos; and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO] WorkOrderNo  comparison for Issued workstatus (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- RECEIVED ON DEVICE (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for Received on device workstatus (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Closed" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Work Status- CLOSED (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;CLOSED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;Closed WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestClosed.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkStatusHistory table ( vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;Closed WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkIssued table ( vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CLOSED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for closed status  (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- REISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkStatus from WorkStatusHistory ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (vars.getObject(&quot;Request_2&quot;).size() &gt; 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkStatus comparison for reissued workstatus (xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] REISSUED&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- RECALL WorkOrder (-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RELEASED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO]  WorkOrderNo comparison for Released workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo ( -1+xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO]  Work Status- ISSUED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for Issued workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (-1+xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECEIVED ON DEVICE (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for Received on device workstatus (vnd.fieldsmart.transaction-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Recall" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECALL (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECALLED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;recalled WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;recalled WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RECALLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for recalled workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (-1+xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- REISSUED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNocomparison for reissued workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (-1+xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkOrderNo table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- REJECT WorkOrder (-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Release Work Order, Success, District Code specified (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RELEASED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for Released workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- ISSUED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for Issued workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RECEIVED ON DEVICE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for rejected workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Update workissued set usercode=&apos;Nikitasha&apos; where WorkOrderNo=&apos;TestRel-29012022&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Reject" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REJECTED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REJECTED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;rejected WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch rejected WorkOrderNo from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;rejected WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REJECTED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for rejected workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (-1+xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REISSUED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for reissued workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (-1+xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (-1+xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CANCEL WorkOrder(-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RELEASED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Released workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- ISSUED (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;ISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;issued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for Issued workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RECEIVED ON DEVICE (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220109&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;235605&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RECEIVED ON DEVICE&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;received on device WorkStatus&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Received on device workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Cancel" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- CANCELLED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;CANCELLED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;cancel WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch cancelled WorkOrderNo from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;cancel WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CANCELLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for cancelled workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- REISSUED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220108&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;163805&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;REISSUED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;reissued WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO]  WorkOrderNo comparison for reissued workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkOrderNo table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkOrderNo table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- BLANK (-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- RELEASED " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkOrderNo comparison for Released workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Blank" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- ISSUED " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220129&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;blank WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch blank WorkStatus from WorkStatusHistory ( -1+xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;blank WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkStatus comparison for blank workstatus (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] &quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- WorkOrderNotFoundException (-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[EXCEPTION] Work Status- RELEASED (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;20220106&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;123105&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;WORKSTATUS&quot;&gt;&#xd;
      &lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
      &lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
      &lt;WorkStatus&gt;RELEASED&lt;/WorkStatus&gt;&#xd;
      &lt;AdditionalText&gt;released WO test&lt;/AdditionalText&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/error/errorCode/text() = &apos;WorkOrderNotFoundException&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HeartBeat (-1+xml)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request- Delete Existing entry" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">DELETE FROM USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+xml</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="HeartBeat Transaction" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HEARTBEAT] Heartbeat Transaction (-1+xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;FRTransaction&gt;&#xd;
  &lt;Item&gt;&#xd;
    &lt;UserCode&gt;Nikitasha&lt;/UserCode&gt;&#xd;
    &lt;LogDate&gt;${__time(yyyyMMdd,Value)}&lt;/LogDate&gt;&#xd;
    &lt;LogTime&gt;${__time(hhmmss,Value)}&lt;/LogTime&gt;&#xd;
    &lt;DeviceId&gt;Nikitasha_Heartbeat_Test&lt;/DeviceId&gt;&#xd;
    &lt;Trans type=&quot;HEARTBEAT&quot;&gt;&#xd;
      &lt;Latitude&gt;40.741895&lt;/Latitude&gt;&#xd;
      &lt;Longitude&gt;-73.989308&lt;/Longitude&gt;&#xd;
    &lt;/Trans&gt;&#xd;
  &lt;/Item&gt;&#xd;
&lt;/FRTransaction&gt;&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request - Fetch ActivityType  from useractivitystatus table (-1+ xml)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select ActivityType from useractivitystatus where usercode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[HEARTBEAT] ActivityType comparison for Heartbeat Transaction (-1+xml)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;ActivityType&quot;:&quot;HEARTBEAT&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of ActivityType (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActivityTypeFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ActivityType&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual ActivityType useractivitystatus table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;ActivityType&quot;).equals(${ActivityTypeFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CLOSED WorkOrder (-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order [IWS]" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]- Work Status- RELEASED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]- JDBC Request - Fetch Released WorkOrderNo from WorkIssued table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]- WorkOrderNo comparison for Released workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- ISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos; and AdditionalText=&apos;issued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO] WorkOrderNo  comparison for Issued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- RECEIVED ON DEVICE (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for Received on device workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Closed" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO]Work Status- CLOSED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;Closed WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;CLOSED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestClosed.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkStatusHistory table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;Closed WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch closed WorkOrderNo from WorkIssued table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CLOSED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkOrderNo comparison for closed status  (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[ClosedWO] Work Status- REISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkStatus from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[ClosedWO]JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (vars.getObject(&quot;Request_2&quot;).size() &gt; 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[ClosedWO]WorkStatus comparison for reissued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] REISSUED&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- RECALL WorkOrder (-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RELEASED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO]  WorkOrderNo comparison for Released workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table(json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO]  Work Status- ISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for Issued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECEIVED ON DEVICE (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for Received on device workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Recall" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- RECALL (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;recalled WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECALLED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;recalled WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RECALLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo  comparison for recalled workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[RECALLWO] Work Status- REISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[RECALLWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[RECALLWO] WorkOrderNo comparison for reissued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- REJECT WorkOrder (-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Release Work Order, Success, District Code specified (xml)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RELEASED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for Released workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- ISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for Issued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- RECEIVED ON DEVICE (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for rejected workstatus (json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Update workissued set usercode=&apos;Nikitasha&apos; where WorkOrderNo=&apos;TestRel-29012022&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Reject" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REJECTED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;rejected WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REJECTED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch rejected WorkOrderNo from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;rejected WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch recalled WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REJECTED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo  comparison for rejected workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[REJECTEDWO] Work Status- REISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[REJECTEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[REJECTEDWO] WorkOrderNo comparison for reissued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (xml)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- CANCEL WorkOrder(-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Release Work Order, Success, District Code specified (json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RELEASED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Released workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Issued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- ISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220129,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;issued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;ISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction?transactionFileName=TestIssue2.xml</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkStatusHistory table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;ISSUED&apos;and AdditionalText=&apos;issued WO test&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch Issued WorkOrderNo from WorkIssued table (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;ISSUED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for Issued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Received on Device" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- RECEIVED ON DEVICE (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220109,&#xd;
    &quot;logTime&quot;: &quot;235605&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;received on device WorkStatus&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RECEIVED ON DEVICE&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch operational WorkOrderNo from WorkStatusHistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos; and AdditionalText= &apos;received on device WorkStatus&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo comparison for Received on device workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Cancel" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- CANCELLED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;cancel WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;CANCELLED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch cancelled WorkOrderNo from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;cancel WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO] JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;CANCELLED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (xml)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO] WorkOrderNo  comparison for cancelled workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- reissued" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CANCELLEDWO] Work Status- REISSUED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;reissued WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;REISSUED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;reissued WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[CANCELLEDWO]  JDBC Request - Fetch reissued WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;REISSUED&apos; and workorderno like &apos;TestRel%&apos; ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[CANCELLEDWO]  WorkOrderNo comparison for reissued workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- BLANK (-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Release Work Order" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.DhLHvDtVpp2Wjaf5-mT_WaDeSCm-HlGv9i55t3xyULWP9z4n_YldPffDxF9gasgXVO0NtGZeuqu17GzdWH7qlheMYhebXCTFQEeGKAZwkb9QuIj4DBBkQ6qHvKaYEeNP_zC-UViZ_nXsL6NJRThWTCNnCwzFzfSC4mtfEvB77fCTU-dTbGwajcSO0Qhls-Gt--ES3MMh3d2d2squFwMueU1C9oMJwl1z8Bg8G5sVhZlCsEpgpW4fMByMtywhn-1KeGXSxGQQvZrK7SvDrDpuE8nU9eXWVgoGDGHge5P-pmosCcxgz8_x4hU_i7Y6sa2QYzBVZV_8v_LE-2y1aeSWEw.DN5vb64VaFDq5lV60R693g.S0GKb9g-VXa9ZtL4KGeadCKuyQ2sRE-0JAdqNcZqqM0i7rKcmCmO2DUTjg4Vkqqc01aEPkJ5hHfjoikXFdXfj7vtU8hJ11D7efIsOuEiaCiLocE2nPGkFOqd3N6DZGrDqE73AWuAGaiRFgW6cYq4JQZBwL7sFqvlFboZPI2cdv49dsWkfPROd8tdt_LrzNIS.PIfJJ8cw4dIYC-B6CdFWZg</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Release Work Order, Success, District Code specified (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;WorkOrder&gt;&#xd;
	&lt;WorkOrderDetail&gt;&#xd;
		&lt;WorkOrderNo&gt;TestRel-29012022&lt;/WorkOrderNo&gt;&#xd;
		&lt;WorkOrderDesc&gt;Release workorder test - 29012022&lt;/WorkOrderDesc&gt;&#xd;
	     &lt;WorkGroupCode&gt;REGRESSION&lt;/WorkGroupCode&gt;&#xd;
	     &lt;OperationType&gt;REL&lt;/OperationType&gt;&#xd;
	     &lt;Latitude&gt;57.12345&lt;/Latitude&gt;&#xd;
	     &lt;Longitude&gt;51.1234&lt;/Longitude&gt;&#xd;
		&lt;PlanStartDate&gt;20220129&lt;/PlanStartDate&gt;&#xd;
	     &lt;ReqFinishDate&gt;20220226&lt;/ReqFinishDate&gt;&#xd;
	     &lt;ReqFinishTime&gt;1200&lt;/ReqFinishTime&gt;&#xd;
		&lt;CreationDate&gt;20220201&lt;/CreationDate&gt;&#xd;
		&lt;CreationTime&gt;125405&lt;/CreationTime&gt;&#xd;
		&lt;DistrictCode&gt;CAM&lt;/DistrictCode&gt;&#xd;
		&lt;FuelType&gt;PETROL&lt;/FuelType&gt;&#xd;
		&lt;Make&gt;RENAULT&lt;/Make&gt;&#xd;
		&lt;Model&gt;MEGANE DYNAMIQUE&lt;/Model&gt;&#xd;
		&lt;Owner&gt;BORRd&lt;/Owner&gt;&#xd;
		&lt;Colour&gt;BLUE&lt;/Colour&gt;&#xd;
		&lt;AccountNo&gt;0714-96-5820&lt;/AccountNo&gt;&#xd;
		&lt;AccountClientNo&gt;07/55/513916&lt;/AccountClientNo&gt;&#xd;
		&lt;Contact&gt;000 8408 4101&lt;/Contact&gt;&#xd;
		&lt;Email&gt;REGRESSION_TEST.COM&lt;/Email&gt;&#xd;
	    &lt;EquipDesc&gt;DETACHED&lt;/EquipDesc&gt;&#xd;
		&lt;AdditionalText/&gt;&#xd;
		&lt;/WorkOrderDetail&gt;&#xd;
&lt;/WorkOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/integration/workorder/release/TestRel-29012022</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Releases a work order to the specied District</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">/CallResponse/success/text() = &apos;true&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">true</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- RELEASED   (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from Workstatushistory table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKSTATUSHISTORY where workstatus= &apos;RELEASED&apos; and AdditionalText=&apos;released WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch Released WorkOrderNo from WorkIssued table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkOrderNo from WORKISSUED where WorkStatus= &apos;RELEASED&apos; and workorderno like &apos;TestRel%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_2</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_2&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkOrderNo comparison for Released workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkOrderNo&quot;:&quot;TestRel-29012022&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkOrderNo (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkOrderNoFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkOrderNo&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkOrderNo WorkIssued table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_2&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_2&quot;).get(i).get(&quot;WorkOrderNo&quot;).equals(${WorkOrderNoFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Blank" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[BLANK] Work Status- ISSUED  (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220108,&#xd;
    &quot;logTime&quot;: &quot;163805&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;blank WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[BLANK] JDBC Request - Fetch blank WorkStatus from WorkStatusHistory ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select WorkStatus from WORKSTATUSHISTORY where usercode= &apos;nikitasha&apos;and AdditionalText= &apos;blank WO test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if ( !ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[BLANK] WorkStatus comparison for blank workstatus (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;WorkStatus&quot;:&quot;[*] &quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of WorkStatus (json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WorkStatusFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WorkStatus&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual WorkStatus WorkStatusHistory table (json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;WorkStatus&quot;).equals(${WorkStatusFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WorkStatus- WorkOrderNotFoundException (-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">BEGIN
DELETE FROM WORKISSUED WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDLOG WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKISSUEDFILEREFS WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
DELETE FROM WORKSTATUSHISTORY WHERE WorkorderNo LIKE &apos;TestRel%&apos;;
select * from WorkIssued where WorkOrderNo LIKE &apos;TestRel%&apos;;
END;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="WorkStatus- Released" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[EXCEPTION] Work Status- RELEASED (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Test&quot;,&#xd;
    &quot;logDate&quot;: 20220106,&#xd;
    &quot;logTime&quot;: &quot;123105&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;additionalText&quot;: &quot;released WO test&quot;,&#xd;
      &quot;districtCode&quot;: &quot;CAM&quot;,&#xd;
      &quot;type&quot;: &quot;WORKSTATUS&quot;,&#xd;
      &quot;workOrderNo&quot;: &quot;TestRel-29012022&quot;,&#xd;
      &quot;workStatus&quot;: &quot;RELEASED&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.error.errorCode</stringProp>
              <stringProp name="EXPECTED_VALUE">WorkOrderNotFoundException</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HeartBeat (-1+json)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request - Delete and fetch existing entry" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">DELETE FROM USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request- Fetch entry for validation (-1+json)" enabled="true">
          <stringProp name="dataSource">SQLTest</stringProp>
          <stringProp name="query">Select * from USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__property(activeuser)}</stringProp>
            </elementProp>
            <elementProp name="x-fws-appCode" elementType="Header">
              <stringProp name="Header.name">x-fws-appCode</stringProp>
              <stringProp name="Header.value">WM</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.transaction-1+json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/vnd.fieldsmart.call-response-1+json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="HeartBeat Transaction" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[HEARTBEAT] Heartbeat Transaction (-1+json)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;item&quot;: {&#xd;
    &quot;deviceId&quot;: &quot;Nikitasha_Heartbeat_Test&quot;,&#xd;
    &quot;logDate&quot;: ${__time(yyyyMMdd,Value)},&#xd;
    &quot;logTime&quot;: &quot;${__time(hhmmss,Value)}&quot;,&#xd;
    &quot;trans&quot;: {&#xd;
      &quot;latitude&quot;: &quot;40.741895&quot;,&#xd;
      &quot;longitude&quot;: &quot;-73.989308&quot;,&#xd;
      &quot;type&quot;: &quot;HEARTBEAT&quot;&#xd;
    },&#xd;
    &quot;userCode&quot;: &quot;Nikitasha&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HostIP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobile/processTransaction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request- Fetch added entry  (-1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">Select * from USERACTIVITYSTATUS WHERE UserCode= &apos;Nikitasha&apos; and deviceid=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="[HEARTBEAT] JDBC Request - Fetch ActivityType  from useractivitystatus table ( -1+json)" enabled="true">
            <stringProp name="dataSource">SQLTest</stringProp>
            <stringProp name="query">select ActivityType from useractivitystatus where usercode= &apos;Nikitasha&apos; and DeviceId=&apos;Nikitasha_Heartbeat_Test&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">Request_1</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Display error for invalid value (-1+json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Request_1&quot;).size() == 0) {

	FailureMessage = &quot;!!!!!!!!!!! No connection to the database or data not received !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="[HEARTBEAT] ActivityType comparison for Heartbeat Transaction (-1+json)" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;ActivityType&quot;:&quot;HEARTBEAT&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor - Value of ActivityType (-1+json)" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActivityTypeFromApi</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ActivityType&quot;:(.+?)}</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Compare Expected with Actual ActivityType useractivitystatus table (-1+json)" enabled="true">
              <stringProp name="BeanShellAssertion.query">boolean comparisonResult = false;

for (int i; i &lt; vars.getObject(&quot;Request_1&quot;).size(); i++) {	   

	if (vars.getObject(&quot;Request_1&quot;).get(i).get(&quot;ActivityType&quot;).equals(${ActivityTypeFromApi_g1})) {

		comparisonResult = true;	
		SampleResult= &quot;The result matches&quot;	;
	}	   
}

if (!comparisonResult) {
	
	FailureMessage = &quot;!!!!!!!!!!! Test failed !!!!!!!!!!!&quot;;
	Failure = true;	
	prev.setStopThread(true);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message">The comparison was unsuccessful.</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
